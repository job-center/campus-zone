<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!-- 配置master数据库 -->
    <bean id="masterDataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="jdbcUrl">
            <value>${passport.jdbc.master.url}</value>
        </property>
        <property name="user">
            <value>${passport.jdbc.username}</value>
        </property>
        <property name="password">
            <value>${passport.jdbc.password}</value>
        </property>
        <property name="driverClass">
            <value>${passport.jdbc.driver}</value>
        </property>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement">
            <value>5</value>
        </property>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts">
            <value>5</value>
        </property>
        <!--每300秒检查所有连接池中的空闲连接。Default: 0
          http://www.mchange.com/projects/c3p0/index.html#configuring_connection_testing
          set idleConnectionTestPeriod to 30, fire up you application and observe
          see whether clients are troubled by stale or broken Connections. If not, stick with 300, or try an even bigger number-->
        <property name="idleConnectionTestPeriod">
            <value>300</value>
        </property>
        <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出
        SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->
        <property name="checkoutTimeout">
            <value>500</value>
        </property>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize">
            <value>200</value>
        </property>
        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize">
            <value>30</value>
        </property>
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
        如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <!-- 异常：APPARENT DEADLOCK!!! Creating emergency threads for unassigned pending tasks!
             原因：c3p0在同时关闭statement和connection的时候，或者关闭他们之间的时间很短的时候，
             有时候connection并没有被关闭，因为有些preparedstatement还在被cached住 -->
        <property name="maxStatements">
            <value>0</value>
        </property>
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize">
            <value>50</value>
        </property>
        <!--最大空闲时间,30分钟内未使用则连接被丢弃。若为0则永不丢弃，单位秒。Default: 0 -->
        <property name="maxIdleTime">
            <value>1800</value>
        </property>
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
      保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
      获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
      时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
      等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false"/>
        <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能
        通过多线程实现多个操作同时被执行。Default: 3-->
        <property name="numHelperThreads">
            <value>10</value>
        </property>
    </bean>

    <!-- 配置slave数据库 -->
    <bean id="slaveDataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="jdbcUrl">
            <value>${passport.jdbc.slave.url}</value>
        </property>
        <property name="user">
            <value>${passport.jdbc.username}</value>
        </property>
        <property name="password">
            <value>${passport.jdbc.password}</value>
        </property>
        <property name="driverClass">
            <value>${passport.jdbc.driver}</value>
        </property>
        <property name="acquireIncrement">
            <value>5</value>
        </property>
        <property name="acquireRetryAttempts">
            <value>5</value>
        </property>
        <property name="idleConnectionTestPeriod">
            <value>300</value>
        </property>
        <property name="checkoutTimeout">
            <value>500</value>
        </property>
        <property name="maxPoolSize">
            <value>200</value>
        </property>
        <property name="minPoolSize">
            <value>30</value>
        </property>
        <property name="maxStatements">
            <value>0</value>
        </property>
        <property name="initialPoolSize">
            <value>50</value>
        </property>
        <property name="maxIdleTime">
            <value>1800</value>
        </property>
        <property name="breakAfterAcquireFailure" value="false"/>
        <property name="testConnectionOnCheckout" value="false"/>
        <property name="numHelperThreads">
            <value>10</value>
        </property>
    </bean>


    <bean id="dbMonitor" class="com.sogou.upd.passport.zk.DBMonitor" destroy-method="destroy">
        <constructor-arg name="zks" value="${zks}"/>
    </bean>

    <bean id="dbZkWitchMonitor" class="com.sogou.upd.passport.zk.DBZkSwitchMonitor" destroy-method="destroy">
        <constructor-arg name="dbMonitor" ref="dbMonitor"/>
        <constructor-arg name="dataSourceZkPath" value="${dataSourceZkPath}"/>
        <constructor-arg name="masterDataSource" ref="masterDataSource"/>
        <constructor-arg name="slaveDataSource" ref="slaveDataSource"/>
    </bean>

    <!-- 读写分离设置 -->
    <bean id="jade.dataSourceFactory" class="net.paoding.rose.jade.dataaccess.datasource.MasterSlaveDataSourceFactory">
        <constructor-arg type="javax.sql.DataSource" ref="masterDataSource"/>
        <constructor-arg type="java.util.List">
            <list>
                <ref bean="slaveDataSource"/>
            </list>
        </constructor-arg>
        <constructor-arg type="boolean" value="false"/>
    </bean>

    <!-- 分表设置 -->
    <bean id="jade.routerInterpreter" class="com.xiaomi.common.service.dal.routing.RewriteSQLInterpreter">
        <property name="routingConfigurator" ref="jade.routingConfigurator"/>
    </bean>
    <bean id="jade.routingConfigurator" class="com.sogou.upd.passport.dao.dal.routing.SGRoutingConfigurator">
        <property name="partitions">
            <list>
                <value>sg-str-hash:account:passport_id:account_{0}:32</value>
                <value>sg-str-hash:connect_token:passport_id:connect_token_{0}:32</value>
                <value>sg-str-hash:connect_relation:passport_id:connect_relation_{0}:32</value>
                <value>sg-str-hash:account_info:passport_id:account_info_{0}:32</value>
                <!-- 昵称映射表 分32张子表 -->
                <value>sg-str-hash:uniqname_passportid_mapping:uniqname:uniqname_passportid_mapping_{0}:32</value>
                <!-- 手机映射表 分32张子表-->
                <value>sg-str-hash:mobile_passportid_mapping:mobile:mobile_passportid_mapping_{0}:32</value>
            </list>
        </property>
    </bean>

    <bean class="net.paoding.rose.jade.context.spring.JadeBeanFactoryPostProcessor"/>

</beans>