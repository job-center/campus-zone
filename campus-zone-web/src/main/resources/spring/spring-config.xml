<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
    ">
    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
    <!--&lt;!&ndash; 自定义AOP &ndash;&gt;-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true">-->
    <!--<aop:include name="controllerAspect"/>-->
    <!--</aop:aspectj-autoproxy>-->

    <!--perf4j performance monitor AOP-->
    <!--<bean id="timingAspect" class="org.perf4j.slf4j.aop.TimingAspect"/>-->

    <!--<aop:aspectj-autoproxy proxy-target-class="true">-->
        <!--<aop:include name="timingAspect"/>-->
    <!--</aop:aspectj-autoproxy>-->
    <!-- auto discovery bean，include @Component@Service@Controller etc. -->
    <context:component-scan base-package="com.jobcenter.**"/>

    <!-- import the dataSource definition -->
    <import resource="classpath:spring/spring-config-dao.xml"/>
    <import resource="classpath:spring/spring-config-service.xml"/>
    <import resource="classpath:spring/spring-config-jredis.xml"/>

    <!--<import resource="spring-config-mail.xml"/>-->

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:deploy_config.properties</value>
            </list>
        </property>
    </bean>

    <!-- spring mvc setting -->

    <!-- config the static resources -->
    <mvc:resources mapping="/static/**" location="/static/"/>
    <!--这个不再需要了，因为静态资源都在上面配置了，所有的请求都由spring来处理，不再需要使用容器的default-servlet-handler来处理了-->
    <!--<mvc:default-servlet-handler/>-->


    <!-- Inteceptor 记录API请求url和执行时间 -->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**"/>-->
            <!--&lt;!&ndash; 打印请求响应时间 &ndash;&gt;-->
            <!--<bean class="com.sogou.upd.passport.web.inteceptor.CostTimeInteceptor"/>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**"/>-->
            <!--&lt;!&ndash; 设置登录后的用户信息 &ndash;&gt;-->
            <!--<bean class="com.sogou.upd.passport.web.inteceptor.LoginInterceptor"/>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**"/>-->
            <!--&lt;!&ndash; 检测是否需要登录 &ndash;&gt;-->
            <!--<bean class="com.sogou.upd.passport.web.inteceptor.LoginRequiredInterceptor"/>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**"/>-->
            <!--&lt;!&ndash; 风控  &ndash;&gt;-->
            <!--<bean class="com.sogou.upd.passport.web.inteceptor.RiskControlInterceptor"/>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/internal/**"/>-->
            <!--&lt;!&ndash; 内部接口code和ct校验 &ndash;&gt;-->
            <!--<bean class="com.sogou.upd.passport.web.inteceptor.InterfaceSecurityInteceptor"/>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->


    <!--<bean id="stringHttpMessageConverter"-->
          <!--class="org.springframework.http.converter.StringHttpMessageConverter">-->
        <!--<property name="supportedMediaTypes">-->
            <!--<list>-->
                <!--<value>text/plain;charset=UTF-8</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="writeAcceptCharset" value="false"/>-->
        <!--&lt;!&ndash;解决响应头Accept-Charset很大，耗费流量的问题&ndash;&gt;-->
    <!--</bean>-->


    <!--<bean id="mappingJacksonHttpMessageConverter"-->
          <!--class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">-->
        <!--&lt;!&ndash; 解决 wap HttpMediaTypeNotAcceptableException: Could not find acceptable representation &ndash;&gt;-->
        <!--<property name="supportedMediaTypes">-->
            <!--<list>-->
                <!--<value>application/json;charset=UTF-8</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
        <!--<property name="messageConverters">-->
            <!--<list>-->
                <!--<ref bean="stringHttpMessageConverter"/>-->
                <!--<ref bean="mappingJacksonHttpMessageConverter"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--metrics监控初始化-->
    <!--<bean id="metrics" class="com.codahale.metrics.MetricRegistry"/>-->

    <!-- 将其放在RequestMappingHandlerAdapter之后用于解决@ResponseBody乱码问题 -->
    <mvc:annotation-driven/>

</beans>